/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/
#include<stdio.h>
#include<stdint.h>

#include "stm32f4xx.h"

#include "FreeRTOS.h"
#include "task.h"

TaskHandle_t xTaskHandle1 = NULL;
TaskHandle_t xTaskHandle2 = NULL;

void vTask1_handler(void *params);
void vTask2_handler(void *params);

#ifdef USE_SEMIHOSTING
//used for semi-hosting
extern void initialise_monitor_handles();
#endif

//private function used for Hardware(like peripherals) specific configurations
static void prvSetupHardware(void);

int main(void)
{

#ifdef USE_SEMIHOSTING
	initialise_monitor_handles();
	printf("This is a Hello world example code.\n");
#endif
	//1. Resets the RCC clock configuration to the default reset state.
	//HSI ON, PLL OFF, HSE OFF, System clock = 16 MHz, cpu_clock = 16 MHz
	RCC_DeInit();

	//2. Update the SystenCoreClock Variable
	SystemCoreClockUpdate();

	prvSetupHardware();

	//3. Create 2 task, task-1 and task-2
    xTaskCreate( vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle1);
    xTaskCreate( vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle2);

    //4. Start the scheduler
    vTaskStartScheduler();


    //you will never return here
	for(;;);
}

void vTask1_handler(void *params)
{
	while(1)
	{

	}
}

void vTask2_handler(void *params)
{
	while(1)
	{

	}
}


static void prvSetupHardware(void)
